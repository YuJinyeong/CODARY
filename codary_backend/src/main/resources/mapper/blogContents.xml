<?xml version="1.0" encoding="UTF-8" ?>
<!DOCTYPE mapper PUBLIC "-//mybatis.org//DTD Mapper 3.0//EN" 
   "http://mybatis.org/dtd/mybatis-3-mapper.dtd">

<mapper namespace="com.spring.web.dao.BlogContentsDao">

	<select id="getContent" parameterType="int" resultType="BlogContentsDto">
		select *
		from blogcontents
		where blog_contents_id = #{blogContentsId} and isdeleted = 0
	</select>
	
	<insert id="writeBlogContent" parameterType="BlogContentsDto" useGeneratedKeys="true" keyProperty="blogContentsId">
		insert into blogcontents(blog_id, blog_contents_title, blog_contents, blog_contents_view, blog_contents_like, blog_datetime, blog_contents_cover)
		values (#{blogId}, #{blogContentsTitle}, #{blogContents}, 0, 0, now(), #{blogContentsCover});
	</insert>
	
	<insert id="writeHash" parameterType="HashtagDto" useGeneratedKeys="true" keyProperty="hashtagId">
		insert into hashtag(hashtag_content) 
		values(#{hashtagContent})
	</insert>
	
	<insert id="writeBlogHash" parameterType="BlogHashtagDto" >
		insert into bloghashtag(hashtag_id, blog_contents_id, blog_id)
		values(#{hashtagId}, #{blogContentsId}, #{blogId})
	</insert>
	
	<select id="listBlogContents" parameterType="String" resultType="BlogContentsDto">
		select *
		from blogcontents
		where blog_id = #{blogId} and isdeleted = 0
	</select>
	
 	<update id="modifyBlogContent" parameterType="BlogContentsDto">
		update blogcontents
		set blog_contents = #{blogContents}, blog_contents_title = #{blogContentsTitle}, blog_contents_cover = #{blogContentsCover}
		where blog_id = #{blogId} and blog_contents_id = #{blogContentsId}
	</update>
	
	<delete id="deleteOldHash" parameterType="BlogContentsDto">
		delete from bloghashtag
		where blog_contents_id = #{blogContentsId}
	</delete>
	
	
	<update id="deleteBlogContent" parameterType="int">
		update blogcontents
		set isdeleted = 1
		where blog_contents_id = #{blogContentsId}
	</update>
	
	<update id="deleteCommentOfPost" parameterType="int">
		update comment
		set isdeleted = 1
		where blog_contents_id = #{blogContentsId}
	</update>
	
	<select id="getAllContents" resultType="BlogContentsDto">
		select *
		from blogcontents
	</select>
	
	<insert id="writeLog" parameterType="map">
		insert into log
		values(now(),#{uid},#{blogContentsId});
	</insert>
	
	<update id="increaseContentsView" parameterType="int">
		update blogcontents
		set blog_contents_view = blog_contents_view + 1
		where blog_contents_id = #{blogContentsId}
	</update>
	
	<update id="increasePostLike" parameterType="int">
		update blogcontents
		set blog_contents_like = blog_contents_like + 1
		where blog_contents_id = #{blogContentsId}
	</update>
	
	<update id="decreasePostLike" parameterType="int">
		update blogcontents
		set blog_contents_like = blog_contents_like - 1
		where blog_contents_id = #{blogContentsId}
	</update>
	
	<select id="readContentLike" resultType="BlogContentsLikeDto">
		select *
		from blogcontentslike
		where uid = #{uid} and blog_contents_id = #{blogContentsId}
	</select>
	
	<insert id="contentLike" parameterType = "BlogContentsLikeDto">
		insert into blogcontentslike(uid, blog_contents_id)
		values(#{uid}, #{blogContentsId})
	</insert>
	
	<delete id="contentUnlike" parameterType = "BlogContentsLikeDto">
		delete from blogcontentslike
		where uid = #{uid} and blog_contents_id=#{blogContentsId}
	</delete>
	
	<insert id="usergraphViewCount" parameterType="int">
		insert into usergraph (blog_id, usergraph_date, blog_view) 
		select blog_id, now(), 0 from blogcontents where blog_contents_id=#{blogContentsId};
	</insert>
	
	<select id="getUser" parameterType="String" resultType="UserDto">
		select * 
		from user
		where blog_id = #{blogId}	
	</select>
	
	<select id="getHashtagOfPost" parameterType="int" resultType="HashtagDto">
		select hashtag_content, hashtag_id
		from bloghashtag inner join hashtag using(hashtag_id)
		where blog_contents_id = #{blogContentsId};
	</select>
		
	<select id="selectHash" parameterType="String" resultType="HashtagDto">
		select * 
		from hashtag 
		<if test="keyword != null and keyword != ''">
		where hashtag_content like concat('#', #{keyword}, '%')
		</if>
	</select>
	
	<select id="findTagByValue" parameterType="String" resultType="HashtagDto">
		select * 
		from hashtag 
		where hashtag_content = #{value} 
	</select>

</mapper>